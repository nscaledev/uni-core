// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"KssOsAjlZPVHAAAA//+ccGAjvRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
