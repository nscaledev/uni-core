// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"time"
)

// Defines values for ErrorError.
const (
	AccessDenied            ErrorError = "access_denied"
	Conflict                ErrorError = "conflict"
	Forbidden               ErrorError = "forbidden"
	InvalidClient           ErrorError = "invalid_client"
	InvalidGrant            ErrorError = "invalid_grant"
	InvalidRequest          ErrorError = "invalid_request"
	InvalidScope            ErrorError = "invalid_scope"
	MethodNotAllowed        ErrorError = "method_not_allowed"
	NotFound                ErrorError = "not_found"
	ServerError             ErrorError = "server_error"
	TemporarilyUnavailable  ErrorError = "temporarily_unavailable"
	UnauthorizedClient      ErrorError = "unauthorized_client"
	UnsupportedGrantType    ErrorError = "unsupported_grant_type"
	UnsupportedMediaType    ErrorError = "unsupported_media_type"
	UnsupportedResponseType ErrorError = "unsupported_response_type"
)

// Defines values for ResourceProvisioningStatus.
const (
	ResourceProvisioningStatusDeprovisioning ResourceProvisioningStatus = "deprovisioning"
	ResourceProvisioningStatusError          ResourceProvisioningStatus = "error"
	ResourceProvisioningStatusProvisioned    ResourceProvisioningStatus = "provisioned"
	ResourceProvisioningStatusProvisioning   ResourceProvisioningStatus = "provisioning"
	ResourceProvisioningStatusUnknown        ResourceProvisioningStatus = "unknown"
)

// Error Generic error message, compatible with oauth2.
type Error struct {
	// Error A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
	Error ErrorError `json:"error"`

	// ErrorDescription Verbose message describing the error.
	ErrorDescription string `json:"error_description"`
}

// ErrorError A terse error string expanding on the HTTP error code. Errors are based on the OAuth2 specification, but are expanded with proprietary status codes for APIs other than those specified by OAuth2.
type ErrorError string

// KubernetesLabelValue A valid Kubenetes label value, typically used for resource names that can be
// indexed in the database.
type KubernetesLabelValue = string

// OrganizationScopedResourceReadMetadata defines model for organizationScopedResourceReadMetadata.
type OrganizationScopedResourceReadMetadata struct {
	// CreatedBy The user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreationTime The time the resource was created.
	CreationTime time.Time `json:"creationTime"`

	// DeletionTime The time the resource was deleted.
	DeletionTime *time.Time `json:"deletionTime,omitempty"`

	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Id The unique resource ID.
	Id string `json:"id"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`

	// OrganizationId The organization identifier the resource belongs to.
	OrganizationId string `json:"organizationId"`

	// ProvisioningStatus The provisioning state of a resource.
	ProvisioningStatus ResourceProvisioningStatus `json:"provisioningStatus"`
}

// ProjectScopedResourceReadMetadata defines model for projectScopedResourceReadMetadata.
type ProjectScopedResourceReadMetadata struct {
	// CreatedBy The user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreationTime The time the resource was created.
	CreationTime time.Time `json:"creationTime"`

	// DeletionTime The time the resource was deleted.
	DeletionTime *time.Time `json:"deletionTime,omitempty"`

	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Id The unique resource ID.
	Id string `json:"id"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`

	// OrganizationId The organization identifier the resource belongs to.
	OrganizationId string `json:"organizationId"`

	// ProjectId The project identifier the resource belongs to.
	ProjectId string `json:"projectId"`

	// ProvisioningStatus The provisioning state of a resource.
	ProvisioningStatus ResourceProvisioningStatus `json:"provisioningStatus"`
}

// RegionScopedResourceMetadata defines model for regionScopedResourceMetadata.
type RegionScopedResourceMetadata struct {
	// CreatedBy The user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreationTime The time the resource was created.
	CreationTime time.Time `json:"creationTime"`

	// DeletionTime The time the resource was deleted.
	DeletionTime *time.Time `json:"deletionTime,omitempty"`

	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Id The unique resource ID.
	Id string `json:"id"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`

	// OrganizationId The organization identifier the resource belongs to.
	OrganizationId string `json:"organizationId"`

	// ProjectId The project identifier the resource belongs to.
	ProjectId string `json:"projectId"`

	// ProvisioningStatus The provisioning state of a resource.
	ProvisioningStatus ResourceProvisioningStatus `json:"provisioningStatus"`

	// RegionId A region identifier.
	RegionId string `json:"regionId"`
}

// ResourceMetadata Resource metadata valid for all API resource reads and writes.
type ResourceMetadata struct {
	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`
}

// ResourceProvisioningStatus The provisioning state of a resource.
type ResourceProvisioningStatus string

// ResourceReadMetadata defines model for resourceReadMetadata.
type ResourceReadMetadata struct {
	// CreatedBy The user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreationTime The time the resource was created.
	CreationTime time.Time `json:"creationTime"`

	// DeletionTime The time the resource was deleted.
	DeletionTime *time.Time `json:"deletionTime,omitempty"`

	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Id The unique resource ID.
	Id string `json:"id"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`

	// ProvisioningStatus The provisioning state of a resource.
	ProvisioningStatus ResourceProvisioningStatus `json:"provisioningStatus"`
}

// ResourceWriteMetadata Resource metadata valid for all API resource reads and writes.
type ResourceWriteMetadata = ResourceMetadata

// Semver A semantic version.
type Semver = string

// StaticResourceMetadata defines model for staticResourceMetadata.
type StaticResourceMetadata struct {
	// CreatedBy The user who created the resource.
	CreatedBy *string `json:"createdBy,omitempty"`

	// CreationTime The time the resource was created.
	CreationTime time.Time `json:"creationTime"`

	// Description The resource description, this optionally augments the name with more context.
	Description *string `json:"description,omitempty"`

	// Id The unique resource ID.
	Id string `json:"id"`

	// Name A valid Kubenetes label value, typically used for resource names that can be
	// indexed in the database.
	Name KubernetesLabelValue `json:"name"`
}

// BadRequestResponse Generic error message, compatible with oauth2.
type BadRequestResponse = Error

// ConflictResponse Generic error message, compatible with oauth2.
type ConflictResponse = Error

// ForbiddenResponse Generic error message, compatible with oauth2.
type ForbiddenResponse = Error

// InternalServerErrorResponse Generic error message, compatible with oauth2.
type InternalServerErrorResponse = Error

// NotFoundResponse Generic error message, compatible with oauth2.
type NotFoundResponse = Error

// UnauthorizedResponse Generic error message, compatible with oauth2.
type UnauthorizedResponse = Error
